package scala.slick.util

import scala.language.implicitConversions
import scala.slick.ast._
import scala.slick.lifted._

/** Utility functions for working with tuples of different arities */
object TupleSupport {
  /** Build a Tuple for the supported arities, otherwise a ProductWrapper. */
  def buildTuple(s: IndexedSeq[Any]): Product = s.length match {
<#list 1..22 as i>
    case ${i} => new Tuple${i}(<#list 1..i as j>s(${j-1})<#if i != j>, </#if></#list>)
</#list>
    case _ => new ProductWrapper(s)
  }

  /** Build an IndexedSeq from a Product */
  def buildIndexedSeq(p: Product): IndexedSeq[Any] = p match {
    case p: ProductWrapper => p.seq
    case p => p.productIterator.toIndexedSeq
  }
}

/** Extension methods for prepending and appending values to tuples */
object TupleMethods {
  implicit class ColumnTupleExtensionMethods[T](val c: Column[T]) extends AnyVal {
    def ~ [U](c2: Column[U]): (Column[T], Column[U]) = (c, c2)
    def ~: [U](c2: Column[U]): (Column[U], Column[T]) = (c2, c)
  }
<#list 2..21 as i>
  implicit class Tuple${i}ExtensionMethods[<#list 1..i as j>T${j}<#if i != j>, </#if></#list>](val t: (<#list 1..i as j>Column[T${j}]<#if i != j>, </#if></#list>)) extends AnyVal {
    def ~ [U](c: Column[U]): (<#list 1..i as j>Column[T${j}], </#list>Column[U]) = (<#list 1..i as j>t._${j}, </#list>c)
    def ~: [U](c: Column[U]): (Column[U]<#list 1..i as j>, Column[T${j}]</#list>) = (c<#list 1..i as j>, t._${j}</#list>)
  }
</#list>

  /** A chained extractor for tuples */
  object ~ {
    def unapply[T1 <: Column[_], T2 <: Column[_]](p: (T1,T2)) =
      Some(p)
<#list 3..22 as i>
    def unapply[<#list 1..i as j>T${j} <: Column[_]<#if i != j>,</#if></#list>](p: (<#list 1..i as j>T${j}<#if i != j>,</#if></#list>)) =
      Some((<#list 1..i-1 as j>p._${j}<#if i-1 != j>,</#if></#list>), p._${i})
</#list>
  }
}

/** A Product to represent larger arities than Tuple22 */
final class ProductWrapper(val seq: IndexedSeq[Any]) extends Product {
  def productArity = seq.length
  def productElement(idx: Int) = seq(idx)
  override def productIterator = seq.iterator
  def canEqual(that: Any) = that.isInstanceOf[ProductWrapper]
  override def equals(that: Any) = that match {
    case p: ProductWrapper => productArity == p.productArity &&
      (0 until productArity).forall(i => productElement(i) == p.productElement(i))
    case _ => false
  }
  override def hashCode = seq.hashCode
  override def toString = seq.mkString("ProductWrapper(", ",", ")")
}
