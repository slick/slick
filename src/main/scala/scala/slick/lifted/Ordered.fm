package scala.slick.lifted

import scala.language.implicitConversions
import scala.slick.ast.{Ordering, Node}

class Ordered(val columns: Seq[(Node, Ordering)])

object Ordered {
<#list 2..22 as i>
 implicit def tuple${i}Ordered[<#list 1..i as j>T${j} <% Ordered<#if i != j>, </#if></#list>](t: (<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)) =
    new Ordered(<#list 1..i as j>t._${j}.columns<#if i != j> ++ </#if></#list>)
</#list>
}

case class ColumnOrdered[T](column: Column[T], ord: Ordering) extends Ordered(Seq((column.toNode, ord))) {
  def asc = copy(ord = ord.asc)
  def desc = copy(ord = ord.desc)
  def reverse = copy(ord = ord.reverse)
  def nullsDefault = copy(ord = ord.nullsDefault)
  def nullsFirst = copy(ord = ord.nullsFirst)
  def nullsLast = copy(ord = ord.nullsLast)
}
