package slick.jdbc

import java.sql.{SQLException, Date, Time, Timestamp}

/** Basic conversions for setting parameters in PositionedParameters. */
trait SetParameter[-T] extends ((T, PositionedParameters) => Unit) { self =>
  def applied(value: T): SetParameter[Unit] = new SetParameter[Unit] {
    def apply(u: Unit, pp: PositionedParameters): Unit = {
      self.apply(value, pp)
    }
  }
}

/** SetParameter for tuple types. */
class SetTupleParameter[-T <: Product](val children: SetParameter[_]*) extends SetParameter[T] {
  def apply(param: T, pp: PositionedParameters): Unit =
    children.iterator.zip(param.productIterator).foreach(t => t._1.asInstanceOf[SetParameter[Any]](t._2, pp))
  override def toString = "SetTupleParameter<"+children.length+">"
}

object SetParameter {
  implicit object SetBigDecimal extends SetParameter[BigDecimal] { def apply(v: BigDecimal, pp: PositionedParameters): Unit = { pp.setBigDecimal(v) } }
  implicit object SetBoolean extends SetParameter[Boolean] { def apply(v: Boolean, pp: PositionedParameters): Unit = { pp.setBoolean(v) } }
  implicit object SetByte extends SetParameter[Byte] { def apply(v: Byte, pp: PositionedParameters): Unit = { pp.setByte(v) } }
  implicit object SetDate extends SetParameter[Date] { def apply(v: Date, pp: PositionedParameters): Unit = { pp.setDate(v) } }
  implicit object SetDouble extends SetParameter[Double] { def apply(v: Double, pp: PositionedParameters): Unit = { pp.setDouble(v) } }
  implicit object SetFloat extends SetParameter[Float] { def apply(v: Float, pp: PositionedParameters): Unit = { pp.setFloat(v) } }
  implicit object SetInt extends SetParameter[Int] { def apply(v: Int, pp: PositionedParameters): Unit = { pp.setInt(v) } }
  implicit object SetLong extends SetParameter[Long] { def apply(v: Long, pp: PositionedParameters): Unit = { pp.setLong(v) } }
  implicit object SetShort extends SetParameter[Short] { def apply(v: Short, pp: PositionedParameters): Unit = { pp.setShort(v) } }
  implicit object SetString extends SetParameter[String] { def apply(v: String, pp: PositionedParameters): Unit = { pp.setString(v) } }
  implicit object SetTime extends SetParameter[Time] { def apply(v: Time, pp: PositionedParameters): Unit = { pp.setTime(v) } }
  implicit object SetTimestamp extends SetParameter[Timestamp] { def apply(v: Timestamp, pp: PositionedParameters): Unit = { pp.setTimestamp(v) } }

  implicit object SetBigDecimalOption extends SetParameter[Option[BigDecimal]] { def apply(v: Option[BigDecimal], pp: PositionedParameters): Unit = { pp.setBigDecimalOption(v) } }
  implicit object SetBooleanOption extends SetParameter[Option[Boolean]] { def apply(v: Option[Boolean], pp: PositionedParameters): Unit = { pp.setBooleanOption(v) } }
  implicit object SetByteOption extends SetParameter[Option[Byte]] { def apply(v: Option[Byte], pp: PositionedParameters): Unit = { pp.setByteOption(v) } }
  implicit object SetDateOption extends SetParameter[Option[Date]] { def apply(v: Option[Date], pp: PositionedParameters): Unit = { pp.setDateOption(v) } }
  implicit object SetDoubleOption extends SetParameter[Option[Double]] { def apply(v: Option[Double], pp: PositionedParameters): Unit = { pp.setDoubleOption(v) } }
  implicit object SetFloatOption extends SetParameter[Option[Float]] { def apply(v: Option[Float], pp: PositionedParameters): Unit = { pp.setFloatOption(v) } }
  implicit object SetIntOption extends SetParameter[Option[Int]] { def apply(v: Option[Int], pp: PositionedParameters): Unit = { pp.setIntOption(v) } }
  implicit object SetLongOption extends SetParameter[Option[Long]] { def apply(v: Option[Long], pp: PositionedParameters): Unit = { pp.setLongOption(v) } }
  implicit object SetShortOption extends SetParameter[Option[Short]] { def apply(v: Option[Short], pp: PositionedParameters): Unit = { pp.setShortOption(v) } }
  implicit object SetStringOption extends SetParameter[Option[String]] { def apply(v: Option[String], pp: PositionedParameters): Unit = { pp.setStringOption(v) } }
  implicit object SetTimeOption extends SetParameter[Option[Time]] { def apply(v: Option[Time], pp: PositionedParameters): Unit = { pp.setTimeOption(v) } }
  implicit object SetTimestampOption extends SetParameter[Option[Timestamp]] { def apply(v: Option[Timestamp], pp: PositionedParameters): Unit = { pp.setTimestampOption(v) } }

<#list 2..22 as i>
  @inline implicit def createSetTuple${i}[<#list 1..i as j>T${j}<#if i != j>, </#if></#list>](implicit <#list 1..i as j>c${j}: SetParameter[T${j}]<#if i != j>, </#if></#list>): SetTupleParameter[(<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)] = new SetTupleParameter[(<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)](<#list 1..i as j>c${j}<#if i != j>, </#if></#list>)
</#list>

  object SetSimpleProduct extends SetParameter[Product] {
    def apply(prod: Product, pp: PositionedParameters): Unit =
      for(i <- 0 until prod.productArity) prod.productElement(i) match {
        case v: Boolean => pp.setBoolean(v)
        case v: Byte => pp.setByte(v)
        case v: Date => pp.setDate(v)
        case v: Double => pp.setDouble(v)
        case v: Float => pp.setFloat(v)
        case v: Int => pp.setInt(v)
        case v: Long => pp.setLong(v)
        case v: Short => pp.setShort(v)
        case v: String => pp.setString(v)
        case v: Time => pp.setTime(v)
        case v: Timestamp => pp.setTimestamp(v)
        case v => throw new SQLException("SetProduct doesn't know how to handle parameter "+i+" ("+v+")")
      }
  }

  implicit object SetUnit extends SetParameter[Unit] { def apply(none: Unit, pp: PositionedParameters) = () }

  def apply[T](implicit f: (T, PositionedParameters) => Unit) = new SetParameter[T] {
    def apply(v: T, pp: PositionedParameters) = f(v, pp)
  }
}
