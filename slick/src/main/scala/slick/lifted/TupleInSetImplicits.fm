package slick.lifted

import slick.ast._
import ScalaBaseType._
import slick.util.ConstArray
import slick.lifted.FunctionSymbolExtensionMethods._
import slick.lifted._
import scala.language.{higherKinds, implicitConversions}
import scala.reflect.ClassTag
import slick.ast.{BaseTypedType, Library, LiteralNode, ProductNode, ScalaBaseType}
import ScalaBaseType._
import scala.language.{higherKinds, implicitConversions}
import slick.util.ConstArray



sealed trait TypeContext[B1, P1] {
  def literals[P2 <: P1] (x: Traversable[P2], vol: Boolean): ProductNode
  def columns ( x: B1): ProductNode
}

sealed trait TupleTypeContext[B1 <: Product, P1 <: Product] extends TypeContext [B1, P1] {
  def baseTypedType: Seq[BaseTypedType[_]]
  override def literals[P2 <: P1] (x:  Traversable[P2], vol: Boolean = false): ProductNode = ProductNode(
    ConstArray.from(
      for(v <- x) yield ProductNode ( v match {
        case v: Product => ConstArray.from(for( i <- 0 until v.productArity) yield LiteralNode(baseTypedType(i),v.productElement(i), vol))
      })
    )
  )

  override def columns(x: B1) : ProductNode = x match {
    case x: Product =>
      ProductNode(ConstArray.from(for(i <- 0 until x.productArity) yield x.productElement(i).asInstanceOf[Rep[_]].toNode))
  }
}


class QueryExtension[T, K](x: T, t: TypeContext[T,K]) {
  def inSet[P <: K, R](seq: Traversable[K])(implicit om: TupleOptionMapper[Boolean, R]): Rep[R] = {
    if(seq.isEmpty) om(LiteralColumn(false))
    else om.column(Library.In, t.columns(x), t.literals(seq, false))
  }

  def inSetBind[P <: K, R](seq: Traversable[K])(implicit om: TupleOptionMapper[Boolean, R]): Rep[R] = {
    if(seq.isEmpty) om(LiteralColumn(false))
    else om.column(Library.In, t.columns(x), t.literals(seq, true))
  }

}

trait TupleInSetImplicits {
  implicit def getQueryExtension[T, K](x: T)(implicit  t: TypeContext[T,K] ) = new QueryExtension(x,t)
}


object TypeContext {

<#list 2..22 as i>
  implicit def getContext${i}[<#list 1..i as j>B${j}<#if i != j>, </#if></#list>] (implicit <#list 1..i as j>t${j}: BaseTypedType[B${j}]<#if i != j>, </#if></#list>) =
    new TupleTypeContext[(<#list 1..i as j>Rep[B${j}]<#if i != j>, </#if></#list>), (<#list 1..i as j>B${j}<#if i != j>, </#if></#list>)] {
      val baseTypedType = Seq(<#list 1..i as j>t${j}<#if i != j>, </#if></#list>)
    }
</#list>

}

