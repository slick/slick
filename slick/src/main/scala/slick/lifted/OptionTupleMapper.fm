package slick.lifted

import annotation.implicitNotFound
import slick.ast.{OptionType, OptionApply, FunctionSymbol, BaseTypedType, Node, TypedType}

@implicitNotFound("Cannot perform option-mapped operation\n      with type: (${r'${P1}'}, ${r'${P2}'}) => ${r'${R}'}\n  for base type: (${r'${B1}'}, ${r'${B2}'}) => ${r'${BR}'}")
sealed trait OptionTupleMapper[B1, B2, BR, P1, P2, R] extends OptionMapper[BR, R]

object OptionTupleMapper {
  val plain = new OptionTupleMapper[Any, Any, Any, Any, Any, Any] {
    def apply(n: Rep[Any]): Rep[Any] = n

    def lift = false

    override def toString = "OptionTupleMapper.plain"
  }
  val option = new OptionTupleMapper[Any, Any, Any, Any, Any, Option[Any]] {
    def apply(n: Rep[Any]): Rep[Option[Any]] = Rep.forNode(OptionApply(n.toNode))(n.asInstanceOf[Rep.TypedRep[Any]].tpe.optionType)

    def lift = true

    override def toString = "OptionTupleMapper.option"
  }
<#list 2..22 as i>
 @inline implicit def getOptionTupleMapper${i}TT[<#list 1..i as j>BL${j}, </#list><#list 1..i as j>BR${j} : BaseTypedType, </#list><#list 1..i as j>PR${j} <: BR${j}, </#list>R] =
    OptionTupleMapper.plain.asInstanceOf[OptionTupleMapper[(<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>), (<#list 1..i as j>BR${j}<#if i != j>, </#if></#list>), R, (<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>), (<#list 1..i as j>PR${j}<#if i != j>, </#if></#list>), R]]
 @inline implicit def getOptionTupleMapper${i}TO[<#list 1..i as j>BL${j}, </#list><#list 1..i as j>BR${j} : BaseTypedType, </#list><#list 1..i as j>PR${j} <: BR${j}, </#list>R] =
    OptionTupleMapper.option.asInstanceOf[OptionTupleMapper[(<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>), (<#list 1..i as j>BR${j}<#if i != j>, </#if></#list>), R, (<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>), Option[(<#list 1..i as j>PR${j}<#if i != j>, </#if></#list>)], Option[R]]]
 @inline implicit def getOptionTupleMapper${i}OT[<#list 1..i as j>BL${j}, </#list><#list 1..i as j>BR${j} : BaseTypedType, </#list><#list 1..i as j>PR${j} <: BR${j}, </#list>R] =
     OptionTupleMapper.option.asInstanceOf[OptionTupleMapper[(<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>), (<#list 1..i as j>BR${j}<#if i != j>, </#if></#list>), R, Option[(<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>)], (<#list 1..i as j>PR${j}<#if i != j>, </#if></#list>), Option[R]]]
 @inline implicit def getOptionTupleMapper${i}OO[<#list 1..i as j>BL${j}, </#list><#list 1..i as j>BR${j} : BaseTypedType, </#list><#list 1..i as j>PR${j} <: BR${j}, </#list>R] =
     OptionTupleMapper.option.asInstanceOf[OptionTupleMapper[(<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>), (<#list 1..i as j>BR${j}<#if i != j>, </#if></#list>), R, Option[(<#list 1..i as j>BL${j}<#if i != j>, </#if></#list>)], Option[(<#list 1..i as j>PR${j}<#if i != j>, </#if></#list>)], Option[R]]]

</#list>
}
