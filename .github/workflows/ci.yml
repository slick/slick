name: CI

on:
 pull_request:
   branches: ['**']
 push:
   branches: ['**']
   tags: [v*]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java: [8, 11, 17]
        scala: [2.12.15, 2.13.8]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432
      oracle:
        image: oracleinanutshell/oracle-xe-11g
        ports:
        - 49160:22
        - 49161:1521
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2017-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: Freeslick18
        ports:
        - 1401:1433
      db2:
        image: ibmcom/db2:11.5.5.1
        ports:
        - 50000:50000
        env:
          DB2INST1_PASSWORD: db2inst1-pwd
          DB2INSTANCE: db2inst1
          DBNAME: SLICKTST
          LICENSE: accept
        options: >-
          --privileged

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Copy DB2 jar file out of docker container
      run: mkdir -p slick-testkit/lib && docker cp ${{ job.services.db2.id }}:/opt/ibm/db2/V11.5/java/db2jcc4.jar slick-testkit/lib/

    - name: Start MySQL
      run: docker run -d -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -p 3306:3306 mysql --disable-log-bin

    - uses: ts-graphviz/setup-graphviz@v1

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: ${{ matrix.java }}

    - name: Build and test
      run: |
        sbt \
          -Dslick.testkit-config=test-dbs/testkit.github-actions.conf \
          ++${{ matrix.scala }} \
          coverage testAll coverageReport \
          testAllSamples
      env:
        TZ: Asia/Kamchatka

  deploy_docs:
    name: Deploy Docs
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: ts-graphviz/setup-graphviz@v1

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 8

    - name: Create deploy key
      run: |
        echo "${{ secrets.PUBLISH_DOCS_KEY }}" > deploy-key
        chmod 600 deploy-key

    - name: Set git user config to github actions bot
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Publish docs to website
      run: GIT_SSH_COMMAND="ssh -i $(pwd)/deploy-key" sbt site/deployDocs

  publish:
    name: Release
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: ts-graphviz/setup-graphviz@v1

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 8

    - name: Publish artifacts to Maven Central
      env:
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      run: sbt ci-release
