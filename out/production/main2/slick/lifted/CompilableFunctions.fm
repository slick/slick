package slick.lifted

import slick.basic.BasicProfile

trait CompilableFunctions extends CompilableLowPriority {
<#list 2..22 as i>
  implicit def function${i}IsCompilable[<#list 1..i as j>A${j}, </#list>B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>), P, (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B, CompiledFunction[(<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B, (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>), P, B, U]] = new Compilable[(<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B, CompiledFunction[(<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B, (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>), P, B, U]] {
    def compiled(raw: (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B, profile: BasicProfile) =
      new CompiledFunction[(<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B, (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>), P, B, U](raw, ((f: (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (<#list 1..i as j>A${j}<#if i != j>, </#if></#list>)]], profile)
  }
</#list>
}
